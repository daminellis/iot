
//*******************************************************
//****                                          *********
//****         Matheus Daminelli                *********
//****                                          *********
//****         Cofre Inteligente - IoT          *********
//****                                          *********
//****                       22/11/2023         *********
//****                                          *********
//*******************************************************

#include <WiFi.h>
#include <Keypad.h>

// Variaveis de escopo global_____________________________________________

    // Acesso à rede Wi-Fi
    const char *ssid = "iPodc_2.4";      //Nome da rede ssid.
    const char *password = "etnethome";  //Senha usada na conexão.
    WiFiServer server(80);              //Porta 80 utilizada pelo servidor (método biblioteca WiFi.h)

    // Define as pinagens do solenoide e buzzer
    const int solenoidePin = 22;        // Pino Solenoide
    const int buzzerPin = 23;           // Pino Buzzer

    // Define as configurações do teclado numérico
    const uint8_t ROWS = 4;             // Quantas colunas tem (4 - Cuidado zero conta?)
    const uint8_t COLS = 4;             // Quantas linhas tem (mesma ideia)

    // Matriz contendo par ordenado linha x coluna com tecla.
    char keys[ROWS][COLS] = {
        {'1', '2', '3', 'A'},
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    // Pinos das colunas e das linhas respectivamente.
    uint8_t colPins[COLS] = {16, 4, 2, 15};
    uint8_t rowPins[ROWS] = {19, 18, 5, 17};

    // Instanciando um teclado para utilizar (método da biblioteca Keypad.h)
    Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

    // Gestão das possíveis senhas de um cofre.
    String senhaDigitada = "";      //Senha digitada - Inicializando com "". 
    String senhaCofre = "4242";     //Senha do Cofre - Default em "4242".L
    bool senhaSend = false;         // Flag para confirmar o envio da nova senha
    bool cofreAberto = false;       // Flag para verificar se o cofre está aberto

    // Gerenciando o tempo da solenoide.
    unsigned long solenoideStartTime = 0; // Variável para controlar o tempo de acionamento do solenoide
    const unsigned long solenoideDuration = 4000; // Duração em milissegundos (4 segundos)

// Fim do escopo global____________________________________________________________________________ 

// Bloco de SETUP - Acontece primeiro______________________________________________________________
void setup()
{
    // Setando o Baudrate da comunicação serial 115,2 Kbps ou 115,2 KHz.
    Serial.begin(115200);

    // Inicializa o WiFi - Na rede ssid conecte usando password.
    WiFi.begin(ssid, password);
    
    // O status da conexão for diferente de WL_CONNECTED...
    while (WiFi.status() != WL_CONNECTED)
    {
        // Segure por 1 segundo...
        delay(1000);
        // O texto "Conectando WiFi..." no terminal.
        Serial.println("Conectando ao WiFi...");
        // Repita o teste no While...
    }

    // Caso a conexão seja estabelecida. Imprima no termianl que foi "Conectado ao WiFi".
    Serial.println("Conectado ao WiFi");

    // Ecreva também o endereço IP atribuído ao dispositivo.
    Serial.print("Endereço IP: ");
    Serial.println(WiFi.localIP());

    // Inicializa o solenoide
    pinMode(solenoidePin, OUTPUT);      // O pino da solenoide é uma saida.
    digitalWrite(solenoidePin, LOW);    // Garante que o solenoide esteja desligado.

    // Inicializa o buzzer
    pinMode(buzzerPin, OUTPUT);         // O pino do buzzer é uma saida.
    digitalWrite(buzzerPin, LOW);       // Deve iniciar em nivel baixo também.

    server.begin();
}


// Loop infinito__________________________________________________________________________
void loop()
{
    // Uma variável char recebe uma tecla do keypad.
    char key = keypad.getKey();

    // Lógica para lidar com solicitações HTTP apenas se não houver tecla pressionada
    if (!key)
    {
        WiFiClient client = server.available();

        if (client)
        {
            // Aguarde até que o cliente envie dados
            while (client.connected() && !client.available())
            {
                delay(1000);
            }

            // Processa a solicitação do cliente, se houver
            if (client.available())
            {
                processarSolicitacao(client);
                Serial.println("Senha do Cofre: " + senhaCofre);
            }
            
            client.stop();
        }
    }
    else
    {
        // Processa tecla apenas se não houver cliente disponível
        processarTecla(key);
    }
}

void processarTecla(char tecla)
{
    senhaDigitada += tecla;

    // Verifica a senha apenas se a senha não foi enviada recentemente
    if (senhaDigitada.length() == 4)
    {
        verificarSenha();
    }

    // Aciona o buzzer como aviso sonoro
    acionarBuzzer();
}

void processarSolicitacao(WiFiClient client) {
    
    String resposta = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n";
    resposta += "<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>";
    resposta += "<title>Cofre Inteligente</title>";
    resposta += "<style>";
    resposta += "body { font-family: Arial, sans-serif; background-color: #f4f4f4; text-align: center; padding: 20px; }";
    resposta += "h1 { color: #333; }";
    resposta += "p { color: #555; }";
    resposta += "label { display: block; margin-top: 10px; }";
    resposta += "input, button { padding: 8px; margin: 5px; }";
    resposta += "button { background-color: #4caf50; color: white; border: none; cursor: pointer; }";
    resposta += "</style>";
    resposta += "</head><body>";
    resposta += "<h1>Cofre Inteligente</h1>";
    resposta += "<p id='status'></p>";
    resposta += "<br>";
    resposta += "<label for='novaSenha'>Digite a nova senha:</label>";
    resposta += "<input type='password' id='novaSenha'>";
    resposta += "<button onclick='enviarNovaSenha()'>Confirmar Nova Senha</button>";
    resposta += "<br>";
    resposta += "<button onclick='acionarSolenoide()'>Abrir Cofre</button>";
    resposta += "<script>";
    resposta += "function enviarNovaSenha() {";
    resposta += "  var novaSenha = document.getElementById('novaSenha').value;";
    resposta += "  if (novaSenha.trim() !== '') {";
    resposta += "    var xhr = new XMLHttpRequest();";
    resposta += "    xhr.open('PUT', '/enviarSenha?senha=' + novaSenha, true);";
    resposta += "    xhr.send();";
    resposta += "    alert('Nova senha enviada com sucesso!');";
    resposta += "  } else {";
    resposta += "    alert('Por favor, digite uma nova senha válida.');";
    resposta += "  }";
    resposta += "}";
    resposta += "function acionarSolenoide() {";
    resposta += "  var xhr = new XMLHttpRequest();";
    resposta += "  xhr.open('PUT', '/acionarSolenoide', true);";
    resposta += "  xhr.send();";
    resposta += "}";
    resposta += "</script>";
    resposta += "</body></html>";

    // Envia a resposta para o cliente
    client.print(resposta);

    // Processa a solicitação PUT
    if (client.available()) {
        String request = client.readStringUntil('\r');  // Lê a solicitação completa

        if (request.startsWith("PUT /acionarSolenoide")) {
            // Se a solicitação for para /acionarSolenoide, chama a função acionarSolenoide
            Serial.println("Solicitação de acionamento do solenoide recebida.");
            acionarSolenoide();
        } else if (request.startsWith("PUT /enviarSenha")) {
            // Se a solicitação for para /enviarSenha, obtém o valor do parâmetro 'senha'
            int posicaoParametro = request.indexOf('=');

            if (posicaoParametro != -1) {
                String senha = request.substring(posicaoParametro + 1, posicaoParametro + 5);
                Serial.println("Senha informada no PUT: " + senha);
                // Lógica para enviar senha
                enviarSenha(senha);
            }
        }
    }
}

void verificarSenha()
{
    // Certifica-se de que as senhas não estão vazias
    if (senhaDigitada.length() == 0 || senhaCofre.length() == 0)
    {
        Serial.println("Erro: Senhas vazias.");
        return;
    }

    // Remove espaços em branco extras das senhas
    senhaDigitada.trim();
    senhaCofre.trim();

    // Usa strcmp para comparar as senhas
    if (strcmp(senhaDigitada.c_str(), senhaCofre.c_str()) == 0)
    {
        solenoideStartTime = millis();      // Registra o tempo de início do acionamento do solenoide
        acionarSolenoide();                 // Usando o método para abrir o cofre.
        Serial.println("Senha correta. Cofre aberto."); //Texto do prompt (Log).
        return;
    }

    Serial.println("Senha incorreta.");
    senhaDigitada = "";
    acionarBuzzerErro(); // Adiciona uma função para acionar o buzzer de erro
    return;
}

// Função que grava a nova senha na variavel global.
void enviarSenha(String argumento)
{
    senhaCofre = argumento;
    senhaSend = true;
    Serial.println("Nova senha confirmada: " + senhaCofre);
    senhaSend = false;
    return;
}

// Adiciona esta função para acionar o buzzer em caso de senha incorreta
void acionarBuzzerErro()
{
    for (int i = 0; i < 2; ++i)
    {
        tone(buzzerPin, 1000, 200);
        delay(300);
    }
    
    return;
}

void acionarSolenoide()
{
    cofreAberto = true;                     // Marcando a variável de controle como verdadeira.
    Serial.println("Solenoide acionado.");  // Texto do prompt
    digitalWrite(solenoidePin, HIGH);       // Aciona o solenoide
    delay(solenoideDuration);               // Mantém o solenoide acionado pelo tempo definido
    digitalWrite(solenoidePin, LOW);        // Desliga o solenoide
    cofreAberto = false;                    // Marcando a variável de controle como falso.
    senhaDigitada = "";                     // Limpa a senha digitada.
}

void acionarBuzzer()
{
    tone(buzzerPin, 1000, 200);
}
