CONEXAO DO ESP 32 A INTERNET 
-------------------------------------------------------------------------------
  #include <WiFi.h>

//setando o esp 32 a nossa internet 
const char *ssid = "SARC IOT";     
const char *password = "IOT2023@"; 

void setup() {
  Serial.begin(115200);

  // conectando a rede Wi-Fi
  WiFi.begin(ssid, password);
  
  Serial.print("Conectando à rede Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println();
  
  // se conectado com sucesso, exiba informações de rede
  Serial.println("Conectado à rede Wi-Fi");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  // Seu código aqui
}
-------------------------------------------------------------------------------
INICIANDO O SERVIDOR WEB//MQTT
-------------------------------------------------------------------------------
AsyncWebServer server(80);

// Define as configurações do servidor MQTT
#define MQTT_SERVER "seu-servidor-MQTT"
#define MQTT_PORT 1883
#define MQTT_USERNAME "seu-usuario-MQTT"
#define MQTT_PASSWORD "sua-senha-MQTT"

WiFiClient wifiClient;
Adafruit_MQTT_Client mqttClient(&wifiClient, MQTT_SERVER, MQTT_PORT, MQTT_USERNAME, MQTT_PASSWORD);

void setup() {
  Serial.begin(115200);

  // Inicializa o WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando ao WiFi...");
  }
  Serial.println("Conectado ao WiFi");

  // Inicializa o servidor web
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    String html = "<html><body>";
    html += "Digite a senha para abrir o cofre: <input type='text' id='senha'>";
    html += "<button onclick='verificarSenha()'>Verificar</button>";
    html += "<p id='status'></p>";
    html += "<button onclick='abrirCofre()'>Abrir Cofre</button>";
    html += "</body></html>";
    request->send(200, "text/html", html);
  });  
-------------------------------------------------------------------------------
ABRINDO VIA MQTT
-------------------------------------------------------------------------------

  // Configura a rota para abrir o cofre via MQTT
  server.on("/abrir", HTTP_GET, [](AsyncWebServerRequest *request){
    // Verifica se a senha está correta e abre o cofre
    if (request->hasParam("senha")) {
      String senha = request->getParam("senha")->value();
      if (senha == senhaCofre) {
        digitalWrite(solenoidePin, HIGH); // Aciona o solenoide
        delay(2000); // Mantém o solenoide acionado por 2 segundos (ajuste conforme necessário)
        digitalWrite(solenoidePin, LOW); // Desliga o solenoide
        request->send(200, "text/plain", "Cofre aberto");
      } else {
        request->send(403, "text/plain", "Senha incorreta");
      }
    } else {
      request->send(400, "text/plain", "Parâmetro de senha ausente");
    }
  });

-------------------------------------------------------------------------------
CONEXOES AO SERVER MQTT
-------------------------------------------------------------------------------

  // Conecta-se ao servidor MQTT
  if (mqttClient.connect()) {
    Serial.println("Conectado ao servidor MQTT");
    mqttClient.subscribe("cofre/abrir");
  } else {
    Serial.println("Falha na conexão MQTT");
  }

  server.begin();
}

-------------------------------------------------------------------------------
VOID LOOP PARA LIDAR COM TENTIVAS DE ABERTURA
-------------------------------------------------------------------------------
void loop() {
  // Lógica para lidar com a entrada do teclado numérico (opcional)
  char key = keypad.getKey();
  if (key) {
    // Adicione a lógica para processar a entrada do teclado numérico
  }

  // Lógica para lidar com mensagens MQTT
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqttClient.readSubscription(5000))) {
    if (subscription == &mqttCofreAbrir) {
      // Lógica para abrir o cofre via MQTT
      abrirCofre();
    }
  }
}

// Função para abrir o cofre
void abrirCofre() {
  digitalWrite(solenoidePin, HIGH); // Aciona o solenoide
  delay(2000); // Mantém o solenoide acionado por 2 segundos (ajuste conforme necessário)
  digitalWrite(solenoidePin, LOW); // Desliga o solenoide
}
-------------------------------------------------------------------------------
