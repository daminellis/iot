const int pinpot = A0;     
const int pinver = 11;     
const int pinverde = 10;   
const int pinazul = 9;  

void setup() {
  pinMode(pinver, OUTPUT);
  pinMode(pinverde, OUTPUT);
  pinMode(pinazul, OUTPUT);
}

void loop() {
  int valorsensor = analogRead(pinpot); 
  float tensao = valorsensor * (5.0 / 1023.0);

  
  if (tensao < 0.5) {
    digitalWrite(pinver, LOW);
    digitalWrite(pinverde, LOW);
    digitalWrite(pinazul, HIGH);  
  } else if (tensao <= 4.5) {
    digitalWrite(pinver, LOW);
    digitalWrite(pinverde, HIGH);  
    digitalWrite(pinazul, LOW);
  } else {
    digitalWrite(pinver, HIGH);    
    digitalWrite(pinverde, LOW);
    digitalWrite(pinazul, LOW);
  }
}
=========================================================================================================================
=========================================================================================================================

exercicio 2

int porta = A1;
int led = 11;
int valor;

void setup() {
  Serial.begin(9600);
  pinMode(porta, INPUT);
  pinMode(led, OUTPUT);
}

void loop() {
  valor = analogRead(porta);
  Serial.println(valor);
  if (valor <= 70) {
    digitalWrite(led, HIGH);
  }
  else 
    digitalWrite(led, LOW);
  
}
=========================================================================================================================
=========================================================================================================================
exeercicio dia 17/08
exercicio 1
int valor;int valor1; int valor2; int valor3;
int ledr = 11;  
int ledg = 10; 
int ledb = 9; 
int aux = 0; 

void setup() {
  Serial.begin(9600);
  pinMode(ledr, OUTPUT);
  pinMode(ledg, OUTPUT);
  pinMode(ledb, OUTPUT);
}

void loop() {
  if (Serial.available() > 0 ) { 
    valor = Serial.parseInt();
    if (aux == 0) {
      valor1 = valor;
      aux = 1;
    }
  else if (aux == 1) { 
    valor2 = valor;
    aux = 2;
  }
  else if (aux == 2) {
    valor3 = valor;
    aux = 0;   
  }
  analogWrite(ledr, valor1);
  analogWrite(ledg, valor2);
  analogWrite(ledb, valor3);
  }

}

=========================================================================================================================
=========================================================================================================================
exercicio 2

const int ledpin[] = {8, 9, 10, 11};  // Pinos dos LEDs de nível
const int potPin = A0;                // Pino do potenciômetro

void setup() {
    
  pinMode(potPin, INPUT);
  Serial.begin(9600);
}

void loop() {
  int potValue = analogRead(potPin); // Lê o valor do potenciômetro (0-1023)

  int signalLedState;
  if (potValue < 50) {
    signalLedState = HIGH;
  } else {
    signalLedState = LOW;
  }

  if (potValue <= 100) {
    digitalWrite(ledpin[1], HIGH);
  } else {
    digitalWrite(ledpin[1], LOW);
  }

  if (potValue <= 150) {
    digitalWrite(ledpin[2], HIGH);
  } else {
    digitalWrite(ledpin[2], LOW);
  }

  if (potValue <= 200) {
    digitalWrite(ledpin[3], HIGH);
  } else {
    digitalWrite(ledpin[3], LOW);
  }

  Serial.print("valor da potencia: ");
  Serial.println(potValue);
}
=========================================================================================================================
=========================================================================================================================
exercicio 3

const int termistorPin = A1; // Pino analógico conectado ao termistor
const int buzzerPin = 7;     // Pino digital conectado ao buzzer

// Coeficientes de Steinhart-Hart para o termistor NTC
const float A = 0.001125308852122;
const float B = 0.000234711863267;
const float C = 0.000000085663516;

// Função para calcular a temperatura em Kelvin
float calculateTemperature(float resistance) {
  float lnR = log(resistance);
  float invT = A + B * lnR + C * (lnR * lnR * lnR);
  return 1.0 / invT;
}

void setup() {
  Serial.begin(9600);
  pinMode(buzzerPin, OUTPUT);
}

void loop() {
  int rawReading = analogRead(termistorPin); // Lê o valor analógico do termistor
  float voltage = rawReading * (5.0 / 1023.0); // Converte para tensão (5V referência, 10 bits ADC)
  
  // Calcula a resistência do termistor usando um divisor de tensão conhecido
  float measuredResistance = (5.0 * 10000.0) / voltage - 10000.0;

  // Calcula a temperatura usando o método de Steinhart-Hart
  float temperatureKelvin = calculateTemperature(measuredResistance);
  float temperatureCelsius = temperatureKelvin - 273.15;

  // Imprime a temperatura
  Serial.print("Temperatura: ");
  Serial.print(temperatureCelsius);
  Serial.println(" °C");

  // Verifica se a temperatura é maior que 40 graus Celsius
  if (temperatureCelsius > 30) {
    digitalWrite(buzzerPin, HIGH); // Ligar o buzzer
  } else {
    digitalWrite(buzzerPin, LOW); // Desligar o buzzer
  }

  delay(1000);
}

=========================================================================================================================
=========================================================================================================================

#include "DHT.h"
#define DHTPIN 2    
#define DHTTYPE DHT11   
#define ledpin 6
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);
  Serial.println(F("DHTxx test!"));
  dht.begin();
}

void loop() {
  delay(2000);

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  
    if ( h > 30) {
    digitalWrite(ledpin, LOW);
  } else {
    digitalWrite(ledpin, HIGH); 
  }

  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(f);
  Serial.print(F("°F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("°C "));
  Serial.print(hif);
  Serial.println(F("°F"));
}
=========================================================================================================================
=========================================================================================================================
#include <Ultrasonic.h>
Ultrasonic ultrasonic(12, 13);
#define ledpin1 6
#define ledpin2 5
int distance;

void setup() {
  Serial.begin(9600);
  pinMode(ledpin1, OUTPUT);
  pinMode(ledpin2, OUTPUT);
}

void loop() {
  distance = ultrasonic.read();
  
  Serial.print("Distance in CM: ");
  Serial.println(distance);
  
  int brightness1 = map(distance, 20, 10, 255, 0);  
  int brightness2 = map(distance, 9, 0, 255, 0);  
  
  brightness1 = constrain(brightness1, 0, 255);
  brightness2 = constrain(brightness2, 0, 255);
 
  analogWrite(ledpin1, brightness1);
  
  if (distance <= 9) {
    analogWrite(ledpin2, brightness2);  
  } else {
    analogWrite(ledpin2, 0); 
  }
}

=========================================================================================================================
#include <Servo.h>

// Pin definitions
const int servoPushPin = 9;  // Pin for the servo that pushes pieces onto the conveyor
const int conveyorM1Pin = 10;  // Pin for controlling the conveyor M1

Servo servoPush;  // Servo object for the pushing mechanism

void setup() {
  // Initialize pins
  pinMode(conveyorM1Pin, OUTPUT);

  // Attach servo
  servoPush.attach(servoPushPin);

  // Start conveyor
  digitalWrite(conveyorM1Pin, HIGH);
}

void loop() {
  // Push a piece onto the conveyor
  servoPush.write(90);  // Move the servo to the position that pushes the piece onto the conveyor
  delay(1000);          // Wait for the piece to be placed on the conveyor
  servoPush.write(0);   // Return the servo to the resting position

  // Continue with the next piece
}

=========================================================================================================================
#include <Servo.h>

// Pin definitions
const int servoPushPin = 9;
const int conveyorM1Pin = 10;
const int heightSensorPin = A0;  // Analog pin for height sensor
const int smallPieceBoxPin = 11; // Pin for sensor detecting small piece box
const int largePieceBoxPin = 12; // Pin for sensor detecting large piece box

Servo servoPush;

void setup() {
  pinMode(conveyorM1Pin, OUTPUT);
  pinMode(smallPieceBoxPin, INPUT_PULLUP);
  pinMode(largePieceBoxPin, INPUT_PULLUP);
  servoPush.attach(servoPushPin);
  digitalWrite(conveyorM1Pin, HIGH);
  Serial.begin(9600);
}

void loop() {
  servoPush.write(90);
  delay(1000);
  servoPush.write(0);

  // Read height sensor
  int sensorValue = analogRead(heightSensorPin);
  if (sensorValue <= 150) {  // Assuming small pieces have lower readings
    servoPush.write(120);    // Position for small pieces
  } else if (sensorValue > 150 && sensorValue <= 300) {  // Assuming large pieces have higher readings
    servoPush.write(60);     // Position for large pieces
  }
  delay(1000);              // Allow time for the piece to move to the positioning area
  servoPush.write(90);      // Return servo to resting position

  // Detect and count pieces in the storage boxes
  if (digitalRead(smallPieceBoxPin) == LOW) {
    Serial.println("Small piece stored.");
  }
  if (digitalRead(largePieceBoxPin) == LOW) {
    Serial.println("Large piece stored.");
  }
}


=========================================================================================================================
=========================================================================================================================

=========================================================================================================================
=========================================================================================================================
